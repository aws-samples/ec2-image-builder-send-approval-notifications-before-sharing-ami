AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  Add a manual approval step where an email is sent to users prompting them to
  approve and share the AMI or enter the EC2 console to test the AMI

Parameters:
  NamingPrefix:
    Type: String
    Description: Prefix given to resource names
    Default: blog

  InstanceType:
    Type: String
    Description: Image Builder instance type
    Default: t3.micro

  ApproverEmail:
    Type: String
    Description: Approver account email address that receives email notifications when a new AMI is created by image builder. Approver to click to approve sharing of AMI to target accounts.

Resources:
  #============================#
  # EC2 Image Builder resources
  #============================#
  EC2ImageBuilderPipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: !Sub ${NamingPrefix}-image-pipeline
      ImageRecipeArn: !Ref EC2ImageBuilderRecipe
      InfrastructureConfigurationArn: !Ref EC2ImageBuilderInfrastructureConfiguration
      DistributionConfigurationArn: !Ref EC2ImageBuilderDistributionConfiguration

  EC2ImageBuilderRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub ${NamingPrefix}-recipe
      Description: This recipe installs the Amazon CloudWatch Agent on an Amazon Linux 2 AMI
      ParentImage: !Sub arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:image/amazon-linux-2-x86/x.x.x
      Components:
      - ComponentArn: !Sub arn:aws:imagebuilder:${AWS::Region}:aws:component/amazon-cloudwatch-agent-linux/x.x.x
      Version: 1.0.0

  EC2ImageBuilderInfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: !Sub ${NamingPrefix}-infra-config
      InstanceTypes:
      - !Ref InstanceType
      InstanceProfileName: !Ref EC2ImageBuilderIAMInstanceProfile
      SnsTopicArn: !Ref ImageBuilderSNSTopic
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
      - !GetAtt VPC.DefaultSecurityGroup
      TerminateInstanceOnFailure: true

  EC2ImageBuilderDistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub ${NamingPrefix}-distribution-config
      Distributions:
      - AmiDistributionConfiguration:
          Name: amazon-linux2-golden-ami - {{ imagebuilder:buildDate }}
          LaunchPermissionConfiguration:
            UserIds:
            - !Ref AWS::AccountId
        Region: !Ref AWS::Region

  EC2ImageBuilderIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2ImageBuilderIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref EC2ImageBuilderIAMRole

  ImageBuilderSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !GetAtt SendApprovalEmailHandler.Arn
        Protocol: lambda
      KmsMasterKeyId: alias/aws/sns

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${NamingPrefix}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${NamingPrefix}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub ${NamingPrefix}-public-subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${NamingPrefix}-public-rtb

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  #=================================#
  # Send approval email resources
  #=================================#
  SNSSendApprovalEmailLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendApprovalEmailHandler.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref ImageBuilderSNSTopic

  SendApprovalEmailHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send_approval_email_function.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt SendApprovalEmailLambdaRole.Arn
      CodeUri: SendApprovalEmailHandler/
      Environment:
        Variables:
          APPROVER_EMAIL: !Ref ApproverEmail
          SNS_TOPIC_ARN: !Ref ApproverSNSEmailTopic
          INVOKE_URL: !Sub https://${APIGatewayShareAMI}.execute-api.${AWS::Region}.amazonaws.com/${APIGatewayShareAMI.Stage}

  SendApprovalEmailLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /blog/
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: sns-publish
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: !Ref ApproverSNSEmailTopic

  ApproverSNSEmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref ApproverEmail
        Protocol: email
      KmsMasterKeyId: alias/aws/sns